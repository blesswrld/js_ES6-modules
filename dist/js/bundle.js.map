{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACe;AACf;AACA;AACA;AACA;AACe;AACf;AACA;;;;;;;UClBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;AACA;AACA,WAAW,UAAU;AACrB,kBAAkB,KAAK,MAAM,IAAI;AACjC;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,UAAU,MAAM,SAAS,IAAI;AAC/C,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACqC;AACrC;AACA;AACA;AACA;AAC8B;AAC9B;AACA;AACA,eAAe,yCAAG,EAAE,MAAM,yCAAG,CAAC,IAAI;AAClC,oDAAK,IAAI","sources":["webpack:///./src/js/main.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/js/script.js"],"sourcesContent":["// Экспорт переменной one\r\n// Используем ключевое слово `export` перед объявлением переменной `one`, чтобы сделать её доступной для импорта в других файлах.\r\nexport let one = 1;\r\n\r\n// Создание переменной two\r\n// Эта переменная создаётся локально в модуле, но далее экспортируется отдельно.\r\nlet two = 2;\r\n\r\n// Экспорт переменной two\r\n// Используем конструкцию `export {}` для экспорта уже существующей переменной `two`.\r\n// После этого её можно импортировать в других файлах.\r\nexport { two };\r\n\r\n// Экспорт функции по умолчанию\r\n// `export default` позволяет экспортировать одну сущность как основную из модуля.\r\n// Здесь экспортируется анонимная функция, которая выводит в консоль строку 'Hello'.\r\nexport default function sayHi() {\r\n    console.log('Hello');\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Пример 1: Импорт именованных экспортов и их использование\r\n// Закомментированный код, который показывает, как можно импортировать переменные `one` и `two` из файла `main.js`:\r\n// import {one, two} from './main';\r\n// console.log(`${one} and ${two}`);\r\n\r\n\r\n\r\n// Пример 2: Импорт именованного экспорта с использованием псевдонима\r\n// Здесь `one` импортируется из `main.js`, но при этом переименовывается в `first`:\r\n// import {one as first} from './main';\r\n// console.log(first);\r\n\r\n\r\n\r\n// Пример 3: Импорт всех экспортов как объект\r\n// Здесь импортируются все именованные экспорты из `main.js` и сохраняются в объекте `data`:\r\n// import * as data from './main';\r\n// console.log(`${data.one} and ${data.two}`); // Доступ к переменным через объект\r\n// data.sayHi(); // Вызов функции через объект\r\n\r\n\r\n\r\n// Пример 4: Импорт именованных экспортов и экспорта по умолчанию\r\n// Импортируем переменные `one` и `two` как именованные экспорты из `main.js`\r\nimport { one, two } from './main.js';\r\n\r\n\r\n\r\n// Пример 5: Импортируем экспорт по умолчанию из `main.js`. Это может быть функция, объект или другое значение.\r\nimport sayHi from './main.js';\r\n\r\n// Используем импортированные значения\r\nconsole.log(`${one} and ${two}`); // Выводим значения `one` и `two` в консоль\r\nsayHi(); // Вызываем функцию `sayHi`, импортированную как экспорт по умолчанию\r\n"],"names":[],"sourceRoot":""}